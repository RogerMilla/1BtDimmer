// DEVELOPED BY ROGER MILLA FORTUNATO SANTOS

#include "mbed.h"


Ticker ticker_led,ticker_Press;
Timer timer;
InterruptIn button(PA_0);

enum States {DOWN, UP, FALL, RISE, MIN, MAX};      //Estados da m√°quina
enum Events {ONE_PRESS,PRESS_TO_FALL, PRESS_TO_RISE, BT_RELEASE,BT_PRESSED, MAX_LUMINOSITY, MIN_LUMINOSITY};


PwmOut pwm_port(PA_9);
DigitalOut myYELLOWled(PD_13);
DigitalOut myBLUEled(PD_15);
DigitalOut myREDled(PD_14);    //Was used during the debug
DigitalOut myGREENled(PD_12);  //Was used during the debug

void StateMachine(int event);   //Machine State Function
Events eventSelect(void);          //Check which event was choosen
void stateSelect(int state);    //Execute the current state (action)


//*************************** Global Variable ********************************

States nextState = DOWN;        
States currentState = DOWN;
Events event;
float timePressed=0;
bool button_pressed=false;
int Y_Led_blinking=0,B_Led_blinking=0;
bool occurred_event=false;
bool direction=0;


//*************************** Functions *************************************

void Leds_OFF();
void timer_begin();
void timer_end();
void blink_YELLOW();
void blink_BLUE();
void check_bt();



int main()
{
    button.rise(&timer_begin);
    button.fall(&timer_end);

    while(1) {
        if (occurred_event) {
            event = eventSelect();
            StateMachine(event);
            stateSelect(nextState);
            occurred_event=false;
        }
    }
}




//**************************************************************************
//---------------------------- STATE MACHINE -------------------------------

void StateMachine(int event)        //Change the next Machine State
{

    switch (currentState) {
        case UP:
            switch(event) {
                case ONE_PRESS:
                    nextState = DOWN;
                break;
                case PRESS_TO_RISE:
                    nextState = RISE;
                break;
            }
        break;

        case DOWN:
            switch(event) {
                case ONE_PRESS:
                    nextState = UP;
                break;
                case PRESS_TO_FALL:
                    nextState = FALL;
                break;
            }
        break;

        case FALL:
            switch(event) {
                case BT_RELEASE:
                    nextState = DOWN;
                break;
                case MIN_LUMINOSITY:
                    nextState = MIN;
                break;
            }
        break;

        case RISE:
            switch(event) {
                case BT_RELEASE:
                    nextState = UP;
                break;
                case MAX_LUMINOSITY:
                    nextState = MAX;
                break;
            }
        break;

        case MIN:
            switch(event) {
                case BT_RELEASE:
                    nextState = UP;
                break;
            }
        break;


        case MAX:
            switch(event) {
                case BT_RELEASE:
                    nextState = DOWN;
                break;
            }
        break;

    }

}


Events eventSelect(void)  //Detects which state was generated by the button/flags/state.
{

//1
    if ((B_Led_blinking==1) || (Y_Led_blinking==1))
        return BT_PRESSED;
//2
    if ((currentState==RISE) && (pwm_port==1))
        return MAX_LUMINOSITY;
//3
    if ((currentState==FALL)  && (pwm_port==0))
        return MIN_LUMINOSITY;
//4
    if (((currentState==RISE) || (currentState==FALL))  && (B_Led_blinking==0) && (Y_Led_blinking==0))
        return BT_RELEASE;

//5
    if ((currentState==MAX) || (currentState==MIN))
        return BT_RELEASE;
//6
    if ((timePressed < 1) && ((currentState==UP) || (currentState==DOWN)) )
        return ONE_PRESS;
//7
    if ((timePressed>1) && (currentState==UP))
        return PRESS_TO_RISE;
//8
    if ((timePressed>1) && (currentState==DOWN))
        return PRESS_TO_FALL;

}




void stateSelect(int state)         //Config current state.
{

    switch (state) {
        case UP:
            ticker_Press.detach();
            Leds_OFF();            //Apaga leds
            myBLUEled=1;              //Acende led AZUL
            button.enable_irq();
            occurred_event=false;
            break;

        case DOWN:
            Leds_OFF();
            myYELLOWled=1;              //Acende led AMARELO
            button.enable_irq();
            occurred_event=false;
            break;

        case FALL:
            button_pressed=true;
            direction=0;
            button.disable_irq();
            ticker_led.attach(&blink_YELLOW,0.2);
            ticker_Press.attach(&check_bt,0.1);
            break;

        case RISE:
            button_pressed=true;
            direction=1;
            button.disable_irq();
            ticker_led.attach(&blink_BLUE,0.2);
            ticker_Press.attach(&check_bt,0.1);
            break;

        case MIN:
            Leds_OFF();
            break;

        case MAX:
            Leds_OFF();
            break;

    }

    currentState = nextState;
}


void check_bt ()  //Button loop to increase/decrease luminosity
{

    timePressed=0;
    if(button.read()==1) {

        if (direction==1) {
            pwm_port=pwm_port+0.05;
            button_pressed=false;
            myREDled=1;
            myGREENled=1;
            if (pwm_port==1) {
                B_Led_blinking=0;
                ticker_led.detach();
                occurred_event=true;
                button.enable_irq();
                ticker_Press.detach();
            }
        } else {

            pwm_port=pwm_port-0.05;
            button_pressed=false;
            myREDled=1;
            myGREENled=1;
            if (pwm_port==0) {
                Y_Led_blinking=0;
                ticker_led.detach();
                occurred_event=true;
                button.enable_irq();
                ticker_Press.detach();
            }
        }

    } else {
        if(button_pressed==false) {
            B_Led_blinking=0;
            Y_Led_blinking=0;
            ticker_Press.detach();
            ticker_led.detach();
            button.enable_irq();
            occurred_event=true;
        }


    }
}

//**************************************************************************
//---------------------------- BLINK YELLOW LED ----------------------------

void blink_YELLOW()
{
    Y_Led_blinking=1;
    myYELLOWled=!myYELLOWled;


}

//---------------------------- BLINK BLUE LED -------------------------------
void blink_BLUE()
{
    B_Led_blinking=1;
    myBLUEled=!myBLUEled;   // Each Blink correspond to 1 sec.


}



//**************************************************************************
//---------------------------- PRESS BUTTON ------------------------------

void timer_begin()              //rise, press button
{

    timer.start();

}

void timer_end()             //fall, release button
{
    timer.stop();
    timePressed=timer.read();
    timer.reset();
    ticker_led.detach();
    occurred_event=true;
}


//**************************************************************************
//---------------------------- TURN LEDS OFF -------------------------------

void Leds_OFF()
{
    myBLUEled=0;
    myYELLOWled=0;
}
